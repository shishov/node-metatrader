// Generated by CoffeeScript 1.9.0
(function() {
  var assert, klass, should;

  assert = require('chai').assert;

  should = require('chai').should();

  klass = require('../../../lib/metatrader').CandlesCommand;

  describe('CandlesCommand', function() {
    var object;
    object = void 0;
    beforeEach(function() {
      return object = new klass('symbol', 'period', 'from', 'to');
    });
    describe('#constructor', function() {
      it('exists method', function() {
        return object.constructor.should.be.a('function');
      });
      it('set this.symbol is success', function() {
        return assert.equal(object.symbol, 'symbol');
      });
      it('set this.period is success', function() {
        return assert.equal(object.period, 'period');
      });
      it('set this.from is success', function() {
        return assert.equal(object.from, 'from');
      });
      return it('set this.to is success', function() {
        return assert.equal(object.to, 'to');
      });
    });
    describe('#generateRequest', function() {
      it('exists method', function() {
        return object.generateRequest.should.be.a('function');
      });
      return it('returns is valid', function() {
        return assert.equal(object.generateRequest(), 'HISTORYNEW-symbol=symbol|period=period|from=from|to=to');
      });
    });
    describe('#stopReadCallback', function() {
      it('exists method', function() {
        return object.stopReadCallback.should.be.a('function');
      });
      it('returns true if valid buffer', function() {
        var valid_buffer;
        valid_buffer = new Buffer([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        return assert.equal(object.stopReadCallback(valid_buffer), true);
      });
      it('returns false if not valit buffer', function() {
        var not_valid_buffer;
        not_valid_buffer = new Buffer([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        return assert.equal(object.stopReadCallback(not_valid_buffer), false);
      });
      return it('returns false if empty buffer', function() {
        var empty_buffer;
        empty_buffer = new Buffer([]);
        return assert.equal(object.stopReadCallback(empty_buffer), false);
      });
    });
    return describe('#processResponse', function() {
      it('exists method', function() {
        return object.processResponse.should.be.a('function');
      });
      return it('returns result is valid', function() {
        var response;
        response = new Buffer([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);
        return assert.deepEqual(object.processResponse(response), [
          {
            bars: 1,
            digits: 0,
            timesign: 0
          }, {
            ctm: 0,
            open: 0,
            high: 0,
            low: 0,
            close: 0,
            vol: 0
          }
        ]);
      });
    });
  });

}).call(this);
