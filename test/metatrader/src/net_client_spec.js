// Generated by CoffeeScript 1.9.0
(function() {
  var assert, klass, should, sinon;

  assert = require('chai').assert;

  sinon = require('sinon');

  should = require('chai').should();

  klass = require('../../../lib/metatrader').NetClient;

  describe('NetClient', function() {
    var command, executor, object;
    object = void 0;
    executor = {
      execute: sinon.stub().returns('execute')
    };
    command = {
      generateRequest: sinon.stub().returns('generateRequest'),
      stopReadCallback: sinon.stub().returns('stopReadCallback'),
      processResponse: sinon.stub().returns('processResponse')
    };
    before(function() {
      return object = new klass(executor);
    });
    describe('#constructor', function() {
      it('exists method', function() {
        return object.constructor.should.be.a('function');
      });
      return it('set this.executor is success', function() {
        return assert.equal(object.executor, executor);
      });
    });
    describe('#send', function() {
      var callback, error;
      callback = sinon.spy();
      error = sinon.spy();
      before(function() {
        return object.send(command, callback, error);
      });
      it('exists method', function() {
        return object.send.should.be.a('function');
      });
      it('set this.callback is success', function() {
        return assert.equal(object.callback, callback);
      });
      it('returns it valid', function() {
        return assert.equal(object.send(command), 'execute');
      });
      it('called command.generateRequest', function() {
        return assert.equal(command.generateRequest.called, true);
      });
      return it('called executor.execute with request and callbacks', function() {
        assert.equal(executor.execute.called, true);
        return assert.equal(executor.execute.calledWith('generateRequest', command.stopReadCallback, object.success, error), true);
      });
    });
    return describe('#success', function() {
      var response;
      response = sinon.stub();
      before(function() {
        object.callback = sinon.stub();
        return object.success(response);
      });
      it('exists method', function() {
        return object.success.should.be.a('function');
      });
      return it('called command.processResponse with response', function() {
        assert.equal(command.processResponse.called, true);
        return assert.equal(command.processResponse.calledWith(response), true);
      });
    });
  });

}).call(this);
